# –ó–∞–¥–∞–Ω–∏–µ 1
print("\n–ó–∞–¥–∞–Ω–∏–µ 1\n")

input_data = [('–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä', 2014, '–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω'),
              ('–ú–∞—Ç—Ä–∏—Ü–∞', 1999, '–õ–∞–Ω–∞ –í–∞—á–æ–≤—Å–∫–∏'),
              ('–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—É—à–µ–∫', 1995, '–î–∂–æ–Ω –õ–∞—Å—Å–µ—Ç–µ—Ä'),
              ('–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è', 2013, '–ê–ª—å—Ñ–æ–Ω—Å–æ –ö—É–∞—Ä–æ–Ω')]


def movFilter(d, year):
    temp = []
    for movie in d:
        if movie[1] >= year:
            temp.append(", ".join(str(item) for item in movie))
    return "\n".join(temp)


print(movFilter(input_data, 2000))

# –ó–∞–¥–∞–Ω–∏–µ 2
print("\n–ó–∞–¥–∞–Ω–∏–µ 2\n")

input_data2 = [('–ò–≤–∞–Ω–æ–≤', '–ì—Ä—É–ø–ø–∞ 1', 4.5),
               ('–ü–µ—Ç—Ä–æ–≤', '–ì—Ä—É–ø–ø–∞ 2', 3.8),
               ('–°–∏–¥–æ—Ä–æ–≤–∞', '–ì—Ä—É–ø–ø–∞ 1', 4.2),
               ('–°–º–∏—Ä–Ω–æ–≤', '–ì—Ä—É–ø–ø–∞ 2', 4.1)]


def maximum_minimum(d):
    max_g = max(d, key=lambda x: x[2])[2]
    min_g = min(d, key=lambda x: x[2])[2]

    temp_max = []
    temp_min = []

    for s in d:
        if s[2] == max_g:
            temp_max.append(", ".join(str(i) for i in s))
        elif s[2] == min_g:
            temp_min.append(", ".join(str(i) for i in s))

    return "\n".join(temp_max) + "\n" + "\n".join(temp_min)


print(maximum_minimum(input_data2))

# –ó–∞–¥–∞–Ω–∏–µ 3
print("\n–ó–∞–¥–∞–Ω–∏–µ 3\n")

input_data3 = [('–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', 120, 20),
               ('–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥', 110, 30),
               ('–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥', 90, 40),
               ('–ë–∞–≤–∞—Ä–∏—è', 100, 20)]


def soccerFilter(d, vi):
    temp = []
    for m in d:
        if m[1] >= vi:
            temp.append(": ".join([str(m[0]), str(m[1])]))
    return "\n".join(temp)


print(soccerFilter(input_data3, 100))

# –ó–∞–¥–∞–Ω–∏–µ 4
print("\n–ó–∞–¥–∞–Ω–∏–µ 4\n")

input_data4 = [('–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ú–∏—Ö–∞–∏–ª –ë—É–ª–∞–∫–æ–≤', 1967),
               ('–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ', '–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', 1866),
               ('–í–æ–π–Ω–∞ –∏ –º–∏—Ä', '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', 1869),
               ('1984', '–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª', 1949)]


def author(a):
    temp = set(map(lambda x: x[1], a))
    result = "\n".join(temp)
    return result


print(author(input_data4))

# –ó–∞–¥–∞–Ω–∏–µ 5 –¥–æ–ø
print("\n–ó–∞–¥–∞–Ω–∏–µ 5\n")

wood = [(i, j) for i in range(8) for j in range(8)]


def blackWhite(coord):
    coord_sum = coord[0] + coord[1]
    if coord_sum % 2 == 0:
        return "White"
    else:
        return "Black"


def woodPrint(x):
    global king
    global queen
    result = []
    temp = []

    for i in x:
        cv = blackWhite(i)
        if i == king:
            temp.append("‚ôî")
        elif i == queen:
            temp.append("‚ôï")
        elif cv == "White":
            temp.append("üåï")
        elif cv == "Black":
            temp.append("üåë")

        if len(temp) == 8:
            temp.append("\n")
            result.extend(temp)
            temp = []
    return ''.join(result)


king = (4, 0)
queen = (3, 7)


def motion_check(figure, coord, new_coord, status=False):
    x, y = coord

    if figure == "king":
        rules = [(x + dx, y + dy)
                 for dx in [-1, 0, 1]
                 for dy in [-1, 0, 1]
                 if (dx != 0 or dy != 0)]

    elif figure == "queen":
        vertical_moves = [(x, i) for i in range(8) if i != y]
        horizontal_moves = [(i, y) for i in range(8) if i != x]
        diagonal_moves = [(x + i, y + i)
                          for i in range(-min(x, y), min(8 - x, 8 - y))
                          if i != 0] + \
                         [(x + i, y - i)
                          for i in range(-min(x, 7 - y), min(8 - x, y + 1))
                          if i != 0]

        rules = vertical_moves + horizontal_moves + diagonal_moves
    else:
        return None

    valid_moves = [(dx, dy) for dx, dy in rules if
                   0 <= dx <= 7 and 0 <= dy <= 7]

    if status:
        return valid_moves
    else:
        return tuple(new_coord) in valid_moves


print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ–¥–∞", "king",
      motion_check("king", king, (4, 2)))
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ–¥–∞", "queen",
      motion_check("queen", queen, (3, 1)))
print("–¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏ (0, 0):", blackWhite((0, 0)))
print("–¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏ (1, 0):", blackWhite((1, 0)))
print(woodPrint(wood))

while True:
    action = input("–í—ã–±–µ—Ä–µ—Ç–µ —Ñ–∏–≥—É—Ä—É: 1 - –∫–æ—Ä–æ–ª—å, 2 - —Ñ–µ—Ä–∑—å, 3 - –≤—ã—Ö–æ–¥: ")

    if action == "1":
        new_king_coordinates = tuple(
            map(int, input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–æ–ª—è (x y): ").split()))
        if motion_check("king", king, new_king_coordinates):
            king = new_king_coordinates
        else:
            print("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–æ–ª—è.")

    elif action == "2":
        new_queen_coordinates = tuple(
            map(int, input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–µ—Ä–∑—è (x y): ").split()))
        if motion_check("queen", queen, new_queen_coordinates):
            queen = new_queen_coordinates
        else:
            print("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ñ–µ—Ä–∑—è.")

    elif action == "3":
        break

    print(woodPrint(wood))
